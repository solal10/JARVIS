#!/bin/bash

# =============================================================================
# JARVIS - Script de d√©ploiement pour Infomaniak
# =============================================================================
# Ce script pr√©pare et d√©ploie l'application Next.js sur Infomaniak
# Usage: ./scripts/deploy.sh
# =============================================================================

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# D√©but du d√©ploiement
log_info "üöÄ D√©marrage du d√©ploiement JARVIS sur Infomaniak..."
echo "=================================================="

# 1. V√©rification de l'environnement
log_info "V√©rification de l'environnement..."

# V√©rifier Node.js version
if ! command -v node &> /dev/null; then
    log_error "Node.js n'est pas install√© !"
    exit 1
fi

NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 22 ]; then
    log_error "Node.js version >= 22 requise. Version actuelle: $(node -v)"
    exit 1
fi
log_success "Node.js version OK: $(node -v)"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    log_error "npm n'est pas install√© !"
    exit 1
fi
log_success "npm version OK: $(npm -v)"

# 2. V√©rification du fichier .env
log_info "V√©rification de la configuration..."

if [ ! -f ".env" ]; then
    log_warning "Fichier .env non trouv√© dans le r√©pertoire courant"

    # Chercher dans /etc/jarvis/.env
    if [ -f "/etc/jarvis/.env" ]; then
        log_info "Fichier .env trouv√© dans /etc/jarvis/"
    else
        log_error "Aucun fichier .env trouv√© ! Veuillez cr√©er .env √† partir de .env.example"
        log_info "Commande: cp .env.example .env"
        exit 1
    fi
else
    log_success "Fichier .env trouv√©"
fi

# 3. V√©rifier l'espace disque disponible
AVAILABLE_SPACE=$(df -h . | awk 'NR==2 {print $4}')
log_info "Espace disque disponible: $AVAILABLE_SPACE"

# 4. Nettoyage des anciennes builds
log_info "Nettoyage des anciennes builds..."

if [ -d ".next" ]; then
    rm -rf .next
    log_success "Ancien r√©pertoire .next supprim√©"
fi

if [ -d "node_modules/.cache" ]; then
    rm -rf node_modules/.cache
    log_success "Cache node_modules nettoy√©"
fi

# 5. Installation des d√©pendances
log_info "Installation des d√©pendances..."

# Utiliser npm ci pour une installation propre (plus rapide que npm install)
if [ -f "package-lock.json" ]; then
    npm ci --production=false --prefer-offline
else
    npm install
fi

log_success "D√©pendances install√©es"

# 6. V√©rification de la m√©moire disponible
log_info "V√©rification des ressources syst√®me..."
if command -v free &> /dev/null; then
    FREE_MEM=$(free -m | awk 'NR==2 {print $7}')
    log_info "M√©moire disponible: ${FREE_MEM}MB"

    if [ "$FREE_MEM" -lt 512 ]; then
        log_warning "M√©moire faible d√©tect√©e. Build avec optimisations m√©moire..."
        # D√©finir une variable pour limiter l'utilisation m√©moire de Node
        export NODE_OPTIONS="--max-old-space-size=512"
    fi
fi

# 7. Build de l'application
log_info "Build de l'application Next.js..."
log_warning "Cette √©tape peut prendre plusieurs minutes..."

# D√©finir les variables d'environnement pour le build
export NODE_ENV=production

# Lancer le build avec gestion d'erreur
if npm run build; then
    log_success "Build r√©ussi !"
else
    log_error "√âchec du build"
    log_info "V√©rifiez les erreurs ci-dessus"
    exit 1
fi

# 8. V√©rification du build
log_info "V√©rification du build..."

if [ ! -d ".next" ]; then
    log_error "Le r√©pertoire .next n'a pas √©t√© cr√©√© !"
    exit 1
fi

if [ ! -f ".next/BUILD_ID" ]; then
    log_error "BUILD_ID manquant - build incomplet !"
    exit 1
fi

BUILD_ID=$(cat .next/BUILD_ID)
log_success "Build ID: $BUILD_ID"

# 9. Cr√©er le r√©pertoire de donn√©es blog si n√©cessaire
log_info "Pr√©paration des r√©pertoires de donn√©es..."

mkdir -p src/data/blog
if [ ! -f "src/data/blog/articles.json" ]; then
    echo "[]" > src/data/blog/articles.json
    log_success "Fichier articles.json cr√©√©"
fi

# 10. R√©sum√© du d√©ploiement
echo ""
echo "=================================================="
log_success "‚úÖ D√©ploiement JARVIS termin√© avec succ√®s !"
echo "=================================================="
log_info "Build ID: $BUILD_ID"
log_info "Node version: $(node -v)"
log_info "npm version: $(npm -v)"
log_info "Environnement: production"
echo ""
log_info "Pour d√©marrer l'application:"
log_info "  ./scripts/start.sh"
echo ""
log_info "Pour d√©marrer en mode d√©veloppement:"
log_info "  npm run dev"
echo "=================================================="
