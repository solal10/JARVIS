import cron from 'node-cron';

class BlogScheduler {
  private static instance: BlogScheduler;
  private isRunning = false;
  private jobs: Map<string, cron.ScheduledTask> = new Map();

  private constructor() {}

  static getInstance(): BlogScheduler {
    if (!BlogScheduler.instance) {
      BlogScheduler.instance = new BlogScheduler();
    }
    return BlogScheduler.instance;
  }

  // D√©marrer l'automatisation des articles de blog
  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Le scheduler de blog est d√©j√† en cours d\'ex√©cution');
      return;
    }

    console.log('üöÄ D√©marrage du scheduler automatique de blog...');

    // T√¢che principale : g√©n√©rer un article tous les 2 jours √† 9h00
    const mainJob = cron.schedule('0 9 */2 * *', async () => {
      console.log('ü§ñ Ex√©cution programm√©e de g√©n√©ration d\'article...');
      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/auto-generate-blog`, {
          method: 'POST'
        });

        const result = await response.json();

        if (result.success) {
          console.log(`‚úÖ Article g√©n√©r√© avec succ√®s : "${result.article.title}"`);
        } else {
          console.log(`‚ö†Ô∏è G√©n√©ration √©chou√©e : ${result.message}`);
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la g√©n√©ration programm√©e:', error);
      }
    }, {
      scheduled: false, // On d√©marre manuellement
      timezone: "Europe/Paris"
    });

    // T√¢che de v√©rification des tendances : tous les jours √† 8h00
    const trendCheckJob = cron.schedule('0 8 * * *', async () => {
      console.log('üìä V√©rification des tendances...');
      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/trends`);
        const trendsData = await response.json();

        if (trendsData.success && trendsData.articleIdeas.length > 0) {
          console.log(`üìà ${trendsData.articleIdeas.length} nouvelles id√©es d'articles d√©tect√©es`);

          // Si on trouve des sujets tr√®s prioritaires (score > 50), g√©n√©rer imm√©diatement
          const urgentTopics = trendsData.articleIdeas.filter((idea: any) => idea.priority > 50);

          if (urgentTopics.length > 0) {
            console.log(`üî• ${urgentTopics.length} sujets urgents d√©tect√©s - g√©n√©ration imm√©diate`);

            const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/auto-generate-blog`, {
              method: 'POST'
            });

            const result = await response.json();
            if (result.success) {
              console.log(`‚úÖ Article urgent g√©n√©r√© : "${result.article.title}"`);
            }
          }
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification des tendances:', error);
      }
    }, {
      scheduled: false,
      timezone: "Europe/Paris"
    });

    // T√¢che de maintenance : nettoyage une fois par semaine le dimanche √† minuit
    const maintenanceJob = cron.schedule('0 0 * * 0', async () => {
      console.log('üßπ Maintenance hebdomadaire du blog...');
      try {
        // Ici on pourrait ajouter des t√¢ches de maintenance comme :
        // - Archiver les anciens articles
        // - Nettoyer les statistiques
        // - Optimiser les performances
        console.log('‚úÖ Maintenance termin√©e');
      } catch (error) {
        console.error('‚ùå Erreur lors de la maintenance:', error);
      }
    }, {
      scheduled: false,
      timezone: "Europe/Paris"
    });

    // Stocker et d√©marrer les t√¢ches
    this.jobs.set('main', mainJob);
    this.jobs.set('trends', trendCheckJob);
    this.jobs.set('maintenance', maintenanceJob);

    // D√©marrer toutes les t√¢ches
    mainJob.start();
    trendCheckJob.start();
    maintenanceJob.start();

    this.isRunning = true;
    console.log('‚úÖ Scheduler de blog d√©marr√© avec succ√®s !');
    console.log('üìÖ Prochaines ex√©cutions :');
    console.log('  - G√©n√©ration d\'articles : tous les 2 jours √† 9h00');
    console.log('  - V√©rification des tendances : tous les jours √† 8h00');
    console.log('  - Maintenance : tous les dimanches √† minuit');
  }

  // Arr√™ter le scheduler
  stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Le scheduler n\'est pas en cours d\'ex√©cution');
      return;
    }

    console.log('‚èπÔ∏è Arr√™t du scheduler de blog...');

    this.jobs.forEach((job, name) => {
      job.stop();
      job.destroy();
      console.log(`‚úÖ T√¢che "${name}" arr√™t√©e`);
    });

    this.jobs.clear();
    this.isRunning = false;
    console.log('‚úÖ Scheduler arr√™t√© avec succ√®s');
  }

  // Ex√©cuter manuellement la g√©n√©ration d'un article
  async generateNow(): Promise<any> {
    console.log('üöÄ G√©n√©ration manuelle d\'un article...');
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/auto-generate-blog`, {
        method: 'POST'
      });

      const result = await response.json();

      if (result.success) {
        console.log(`‚úÖ Article g√©n√©r√© manuellement : "${result.article.title}"`);
      } else {
        console.log(`‚ö†Ô∏è G√©n√©ration manuelle √©chou√©e : ${result.message}`);
      }

      return result;
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration manuelle:', error);
      return { success: false, error: 'Erreur lors de la g√©n√©ration manuelle' };
    }
  }

  // V√©rifier le statut du scheduler
  getStatus() {
    return {
      isRunning: this.isRunning,
      activeJobs: Array.from(this.jobs.keys()),
      nextRuns: this.isRunning ? {
        articles: 'Tous les 2 jours √† 9h00',
        trends: 'Tous les jours √† 8h00',
        maintenance: 'Dimanche √† minuit'
      } : null
    };
  }

  // Programmer une g√©n√©ration unique √† une heure sp√©cifique
  scheduleOneTime(cronExpression: string, description: string = 'T√¢che unique') {
    const uniqueId = `onetime_${Date.now()}`;

    const job = cron.schedule(cronExpression, async () => {
      console.log(`üéØ Ex√©cution de la t√¢che unique : ${description}`);
      await this.generateNow();

      // Supprimer la t√¢che apr√®s ex√©cution
      job.stop();
      job.destroy();
      this.jobs.delete(uniqueId);
      console.log(`‚úÖ T√¢che unique "${description}" termin√©e et supprim√©e`);
    }, {
      scheduled: true,
      timezone: "Europe/Paris"
    });

    this.jobs.set(uniqueId, job);
    console.log(`üìÖ T√¢che unique programm√©e : "${description}" - ${cronExpression}`);

    return uniqueId;
  }
}

// Exporter l'instance singleton
export const blogScheduler = BlogScheduler.getInstance();

// Fonctions utilitaires pour faciliter l'utilisation
export const startBlogAutomation = () => blogScheduler.start();
export const stopBlogAutomation = () => blogScheduler.stop();
export const generateArticleNow = () => blogScheduler.generateNow();
export const getBlogSchedulerStatus = () => blogScheduler.getStatus();

// Types pour TypeScript
export interface BlogSchedulerStatus {
  isRunning: boolean;
  activeJobs: string[];
  nextRuns: {
    articles: string;
    trends: string;
    maintenance: string;
  } | null;
}